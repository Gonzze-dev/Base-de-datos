CREATE OR REPLACE FUNCTION getUserByMail(correoU VARCHAR) 
RETURNS TABLE (cuil bigintPos, 
               nombre VARCHAR(100),
               contrasenia VARCHAR,
               correo mail,
               admin BOOLEAN,
              id_carrito intPos)
AS
$getUsuerByCorreo$
BEGIN

 RETURN QUERY SELECT * FROM usuario WHERE usuario.correo = correoU;
END;
$getUsuerByCorreo$ 
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION insertUser(cuilU bigintPos, 
                                      nombreU VARCHAR(100),
                                     contraseniaU VARCHAR,
                                     correoU mail) RETURNS BOOLEAN
AS
$getUsuario$
DECLARE
    existeCuil BOOLEAN;
    existeCorreo BOOLEAN;
    noExisteUsuario BOOLEAN;
    
BEGIN
 
 SELECT * INTO existeCuil FROM cuilExists(cuilU);
 SELECT * INTO existeCorreo FROM mailExists(correoU);
 noExisteUsuario = NOT (existeCuil OR existeCorreo);
 
 IF noExisteUsuario THEN
     INSERT INTO usuario (cuil, nombre, contrasenia, correo)
     VALUES (cuilU, nombreU, contraseniaU, correoU);
 END IF;
 
 RETURN noExisteUsuario;
END;
$getUsuario$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION agregarLibro(isbnL VARCHAR,
                                        url_imagenL VARCHAR,
                                        tituloL VARCHAR,
                                        fecha_edicionL DATE,
                                        precioL Tprice,
                                        stockL intPos,
                                        descripcionL varchar,
                                        id_editorialL intPos,
                                        id_idiomaL intPos)
RETURNS character varying AS
$agregarLibro$
DECLARE
    qry BOOLEAN;
    existe BOOLEAN;
BEGIN

    SELECT * INTO existe FROM libroExists(isbnL);
    
    IF existe THEN
        RAISE EXCEPTION 'ERORR AL INGRESAR EL LIBRO CON ISBN %', isbnL USING HINT = ' ya existe';
    END IF;
    

    INSERT INTO libro (isbn,
                           url_imagen,
                           titulo,
                           fecha_edicion,
                           precio,
                           stock,
                           descripcion,
                           id_editorial,
                           id_idioma)
        VALUES (isbnL,
                url_imagenL,
                tituloL,
                fecha_edicionL,
                precioL,
                0,
                descripcionL,
                id_editorialL,
                id_idiomaL);
        INSERT INTO compra_libro(isbn, cantidad)
        VALUES (isbnL, 
                stockL);

    RETURN ('EL LIBRO CON ' || isbnl || ' FUE AGREGADO CON EXITO!');
END;
$agregarLibro$ 
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION agregarLibroComprado(isbnL varchar,
                                                cantidadL intPos)
RETURNS character varying AS
$agregarLibroComprado$
DECLARE
    existe BOOLEAN;
BEGIN

    SELECT * INTO existe FROM libroExists(isbnL);

    IF NOT existe THEN
        RAISE EXCEPTION 'ERORR CON EL LIBRO CON ISBN %', isbnL USING HINT = ' NO EXISTE';
    END IF;

    INSERT INTO compra_libro(isbn, cantidad)
    VALUES (isbnL, 
            cantidadL);

    RETURN ('EL LIBRO CON ' || isbnl || ' FUE AGREGADO Y SE ACTUALIZO SU STOCK CON EXITO!');
END;
$agregarLibroComprado$ 
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION getFavUsuarioByCuil(cuilU bigintPos) 
RETURNS TABLE (cuil bigintPos,
            nombre VARCHAR(100),
            titulo VARCHAR, 
            fecha_edicion date,
            precio Tprice,
            descripcion VARCHAR,
            idioma VARCHAR(20))
AS
$getFavUsuarioByCuil$
BEGIN

 RETURN QUERY SELECT vfu.cuil, 
                    vfu.nombre, 
                    vfu.titulo, 
                    vfu.fecha_edicion,
                    vfu.precio,
                    vfu.descripcion, 
                    vfu.idioma FROM view_FavoritosUusario vfu
                WHERE vfu.cuil = cuilU;
END;
$getFavUsuarioByCuil$ 
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION getCarritoUsuarioByCuil(cuilU bigintPos) 
RETURNS TABLE (cuil bigintPos,
            nombre VARCHAR(100),
            titulo VARCHAR, 
            fecha_edicion date,
            precio Tprice,
            descripcion VARCHAR,
            idioma VARCHAR(20))
AS
$getCarritoUsuario$
BEGIN

 RETURN QUERY SELECT cu.cuil, 
            cu.nombre, 
            cu.titulo,
            cu.fecha_edicion, 
            cu.precio, 
            cu.descripcion,
            cu.idioma FROM view_CarritoUsuario cu
            WHERE cu.cuil = cuilU;
END;
$getCarritoUsuario$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION getFacturaUsuarioByCuil(cuilU bigintPos) 
RETURNS TABLE (cuil bigintPos,
            nombre VARCHAR(100),
            titulo VARCHAR, 
            idioma VARCHAR(20),
            precio Tprice,
            cantidad intPos,
            total Tprice,
            fecha DATE,
            calle VARCHAR,
            numero smallintPos,
            piso_departamento VARCHAR(10),
            cp smallintPos)
AS
$getCarritoUsuario$
BEGIN

 RETURN QUERY SELECT vfu.cuil, 
                    vfu.nombre, 
                    vfu.titulo,
                    vfu.idioma,
                    vfu.precio,
                    vfu.cantidad,
                    vfu.total,
                    vfu.fecha,
                    vfu.calle,
                    vfu.numero,
                    vfu.piso_departamento,
                    vfu.cp FROM view_FacturaUsuario vfu
                WHERE vfu.cuil = cuilU;
END;
$getCarritoUsuario$ 
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION getLibroByIsbn(isbnL varchar) 
RETURNS TABLE (isbn varchar,
            titulo VARCHAR(100),
            url_imagen VARCHAR,
            fecha_edicion DATE,
            precio Tprice,
            stock intPos,
            descripcion VARCHAR,
            PuntuacionPromedio decimal(2,2),
            idioma VARCHAR(20),
            editorial VARCHAR,
            tema VARCHAR)
AS
$getLibroByIsbn$
BEGIN

 RETURN QUERY SELECT 
                    vl.isbn,
                    vl.titulo,
                    vl.url_imagen,
                    vl.fecha_edicion,
                    vl.precio,
                    vl.stock,
                    vl.descripcion,
                    vl.PuntuacionPromedio,
                    vl.idioma,
                    vl.editorial,
                    vl.tema FROM view_Libro vl
                WHERE vl.isbn = isbnL;
END;
$getLibroByIsbn$
LANGUAGE plpgsql;