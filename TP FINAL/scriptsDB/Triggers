CREATE OR REPLACE FUNCTION crearCarrito() RETURNS TRIGGER AS
$crearCarritoCuandoSeCreaUsuario$
BEGIN
        INSERT INTO carrito (fecha) VALUES (CURRENT_DATE);
 RETURN NEW;
END;
$crearCarritoCuandoSeCreaUsuario$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_crearCarrito BEFORE INSERT ON usuario
FOR EACH ROW EXECUTE PROCEDURE crearCarrito(); 

CREATE OR REPLACE FUNCTION actualizarStockLibro() RETURNS TRIGGER AS
$actualizarStockLibro$
DECLARE
    stockLibro intPos;
    nuevaCantidad intPos;
BEGIN
    SELECT stock INTO stockLibro FROM libro WHERE isbn = NEW.isbn;
    
    nuevaCantidad := stockLibro + NEW.cantidad;
    
    UPDATE libro
        SET stock = nuevaCantidad
    WHERE isbn = NEW.isbn;
    
    RETURN NEW;
END;
$actualizarStockLibro$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_actualizarStockLibro AFTER INSERT ON compra_libro
FOR EACH ROW EXECUTE PROCEDURE actualizarStockLibro(); 

CREATE OR REPLACE FUNCTION actualizarLibroComprado() RETURNS TRIGGER AS
$actualizarLibroComprado$
DECLARE
    cantidad intPos;
BEGIN
    cantidad := NEW.stock;
    UPDATE libro
        SET stock = 0
    WHERE isbn = NEW.isbn;
    
    INSERT INTO compra_libro(isbn, cantidad)
    VALUES (NEW.isbn, cantidad);
    
    RETURN NEW;
END;
$actualizarLibroComprado$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_actualizarLibroComprado AFTER INSERT ON libro
FOR EACH ROW EXECUTE PROCEDURE actualizarLibroComprado(); 


CREATE OR REPLACE FUNCTION actualizarId_ordenDeOrdenDetalle() RETURNS TRIGGER AS
$actualizarId_ordenDeOrdenDetalle$
DECLARE
    qryTotalCompra varchar;
    qryGetIdCarrito varchar;
    qryGetCuil varchar;
    qryGetIdDireccion varchar;
    qryGetMaxIdOrden varchar;
    
    totalCompra Tprice;
    idCarrito intPos;
    cuilUsuario bigintPos;
    idDireccion intPos;
    maxId intPos;
BEGIN
    qryTotalCompra := 'SELECT sum(precio)::Tprice FROM orden_detalle WHERE id_orden = null';
    qryGetIdCarrito := 'SELECT id_carrito FROM orden_detalle WHERE id = MAX(id)';
    qryGetCuil := 'SELECT cuil FROM usuario WHERE usuario.id_carrito = idCarrito';
    qryGetIdDireccion := 'SELECT id FROM direccion WHERE cuil = cuilUsuario';
    qryGetMaxIdOrden := 'SELECT id FROM orden WHERE id = MAX(id)';
    
    EXECUTE qryTotalCompra INTO totalCompra;
    EXECUTE qryGetIdCarrito INTO idCarrito;
    EXECUTE qryGetCuil INTO cuilUsuario;
    EXECUTE qryGetIdDireccion INTO idDireccion;
    EXECUTE qryGetMaxIdOrden INTO maxId;
    
    INSERT INTO orden (fecha, total, cuil, id_direccion)
    VALUES (CURRENT_DATE, totalCompra, qryGetCuil, idDireccion);

    
    UPDATE orden_detalle
        SET id_orden = maxId
    WHERE id_orden = NULL;

    RETURN NEW;
END;
$actualizarId_ordenDeOrdenDetalle$ 
LANGUAGE plpgsql;

CREATE TRIGGER trigger_actualizarId_ordenDeOrdenDetalle AFTER DELETE ON linea_carrito
FOR EACH ROW EXECUTE PROCEDURE actualizarId_ordenDeOrdenDetalle();

CREATE OR REPLACE FUNCTION convertirLineaCarritoAOrden() RETURNS TRIGGER AS
$convertirLineaCarritoAOrden$
DECLARE
    
    maxIdOrden intPos;
    nuevaCantidad intPos;
    precioLibro Tprice;
    cantLibrosEnLineaCarrito intPos;
    precioTotal Tprice;
    cuilUsuario bigintPos;
    idDireccion intPos;
    totalCantidades bigintPos;
BEGIN
    ALTER TABLE orden_detalle
        DROP IF EXISTS FK_orden;
    
    SELECT max(orden.id) INTO maxIdOrden FROM orden;
    
    SELECT libro.precio INTO precioLibro FROM libro 
    WHERE libro.isbn = OLD.isbn;
    
    SELECT count(linea_carrito.nro_linea) INTO cantLibrosEnLineaCarrito FROM linea_carrito 
    WHERE linea_carrito.id_carrito = OLD.id_carrito;
    
    maxIdOrden := maxIdOrden + 1;
    
    INSERT INTO orden_detalle (precio, cantidad, id_orden, isbn, id_carrito)
    VALUES (precioLibro,OLD.cantidad, maxIdOrden, OLD.isbn, OLD.id_carrito);
    
    IF cantLibrosEnLineaCarrito = 1 THEN
        SELECT sum(orden_detalle.precio) INTO precioTotal FROM orden_detalle
        WHERE orden_detalle.id_orden = maxIdOrden;
        
        SELECT sum(orden_detalle.cantidad) INTO precioTotal FROM orden_detalle
        WHERE orden_detalle.id_orden = maxIdOrden;
        
        SELECT usuario.cuil INTO cuilUsuario FROM usuario 
        WHERE usuario.id_carrito = OLD.id_carrito;
        
        SELECT direccion.id INTO idDireccion FROM direccion 
        WHERE direccion.cuil = cuilUsuario;
        
        precioTotal := precioTotal * totalCantidades;
        
        INSERT INTO orden (total, cuil, id_direccion)
        VALUES (precioTotal, cuilUsuario, idDireccion);
        
        ALTER TABLE orden_detalle
            ADD CONSTRAINT FK_orden FOREIGN KEY (id_orden) REFERENCES orden(id);
    END IF;
    RETURN NEW;
END;
$convertirLineaCarritoAOrden$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_convertirLineaCarritoAOrden BEFORE DELETE ON linea_carrito
FOR EACH ROW EXECUTE PROCEDURE convertirLineaCarritoAOrden();